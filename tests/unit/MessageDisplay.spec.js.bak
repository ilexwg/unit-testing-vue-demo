import MessageDisplay from '@/components/MessageDisplay.vue';
import { mount } from '@vue/test-utils';
import { getMessage } from '@/services/axios';
import flushPromises from 'flush-promises';

jest.mock('@/services/axios');

describe('MessageDisplay', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('Calls getMessage and displays message', async () => {
    // mock the API call
    const mockMessage = 'Hello from the db';
    getMessage.mockResolvedValueOnce({ text: mockMessage }); // call our mocked get request

    const wrapper = mount(MessageDisplay);

    await flushPromises(); // wait for promise to resolve
    expect(getMessage).toHaveBeenCalledTimes(1); // check that call happened once

    // check that component displays message
    const message = wrapper.find('[data-testid="message"]').element.textContent;
    expect(message).toEqual(mockMessage);
  });

  test('Displays an error when getMessage call fails', async () => {
    // mock the failed API call
    const mockError = 'Oops! Something went wrong.';
    getMessage.mockRejectedValueOnce(mockError);

    const wrapper = mount(MessageDisplay);

    await flushPromises(); // wait for promise to resolve
    expect(getMessage).toHaveBeenCalledTimes(1); // check that call happened once

    // check that component displays error
    const displayedError = wrapper.find('[data-testid="message-error"]').element
      .textContent;
    expect(displayedError).toEqual(mockError);
  });
});
